<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>2016Fall 課程網誌 (虎尾科大MDE)</title><link href="./" rel="alternate"></link><link href="./feeds/hw.atom.xml" rel="self"></link><id>./</id><updated>2017-04-20T02:00:00+08:00</updated><entry><title>期中報告</title><link href="./qi-zhong-bao-gao.html" rel="alternate"></link><published>2017-04-20T02:00:00+08:00</published><updated>2017-04-20T02:00:00+08:00</updated><author><name>40423106</name></author><id>tag:,2017-04-20:./qi-zhong-bao-gao.html</id><summary type="html">&lt;!-- PELICAN_END_SUMMARY --&gt;

&lt;p&gt;test&lt;/p&gt;
&lt;!-- 導入 Brython 標準程式庫 --&gt;

&lt;script type="text/javascript" src="https://cdn.rawgit.com/brython-dev/brython/master/www/src/brython_dist.js"&gt;
&lt;/script&gt;

&lt;!-- 啟動 Brython --&gt;

&lt;script&gt;
window.onload=function(){
brython(1);
}
&lt;/script&gt;

&lt;!-- 以下實際利用  Brython 畫四連桿 trace point 路徑--&gt;

&lt;canvas id="fourbar" width="600" height="400"&gt;&lt;/canvas&gt;

&lt;div id="container1"&gt;&lt;/div&gt;

&lt;script type="text/python3"&gt;
from browser import document as doc
from browser import html
import math
# 準備繪圖畫布
canvas = doc["fourbar"]
container1 = doc['container1']
ctx = canvas.getContext("2d")

fourbar_data = open("./../data/404231061.csv").read()
fourbar_list = fourbar_data.splitlines()
#container1 &lt;= fourbar_list[0]
# 以下可以利用 ctx 物件進行畫圖
# 先畫一條直線
ctx.beginPath()
# 設定線的寬度為 1 個單位
ctx.lineWidth = 1
# 利用 transform 將 y 座標反轉, 且 offset canvas.height
# (X scale, X skew, Y skew, Y scale, X offset, Y offset)
# 配合圖形位置進行座標轉換
ctx.transform(1, 0, 0, -1, canvas.width/2+250, canvas.height/2+100)
# 畫出 x 與 y 座標線
# 各座標值放大 8 倍
ratio = 8
ctx.moveTo(0, 0)
ctx.lineTo(-30*ratio, 0)
start_point = fourbar_list[0].split(",")
ctx.moveTo(float(start_point[0])*ratio, float(start_point[1])*ratio)
count = 0
for data in fourbar_list[1:]:
    point = data.split(",")
    #count = count + 1
    #container1 &lt;= str(count) + ":" + point[0] + "," + point[1]
    #container1 &lt;= html.BR()
    ctx.lineTo(float(point[0])*ratio, float(point[1])*ratio)
# 設定顏色為藍色, 也可以使用 "rgb(0, 0, 255)" 字串設定顏色值
ctx.strokeStyle = "blue"
# 實際執行畫線
ctx.stroke()
ctx.closePath()
&lt;/script&gt;</summary></entry><entry><title>1-12 電腦輔助設計實習課程總結</title><link href="./1-12-dian-nao-fu-zhu-she-ji-shi-xi-ke-cheng-zong-jie.html" rel="alternate"></link><published>2017-01-12T02:00:00+08:00</published><updated>2017-01-12T02:00:00+08:00</updated><author><name>40423106</name></author><id>tag:,2017-01-12:./1-12-dian-nao-fu-zhu-she-ji-shi-xi-ke-cheng-zong-jie.html</id><summary type="html">&lt;!-- PELICAN_END_SUMMARY --&gt;

&lt;p&gt;2016-11-17
&lt;p&gt;有關 Solvespace 機構模擬功能介紹, 與 Python3 及 Brython 程式驗證&lt;/p&gt;&lt;/p&gt;
&lt;h2&gt;Solvespace 平面四連桿機構模擬&lt;/h2&gt;

&lt;p&gt;直接利用 Solvespace Analyze-Trace Point-Stop Trace 得到下列繞行路徑:&lt;/p&gt;

&lt;p&gt;根據下圖, 試驗證 Solvespace 機構模擬的資料之正確性.
&lt;p&gt;&lt;img src="./../w7/1117.png" width="800" /&gt;&lt;/p&gt;&lt;/p&gt;
&lt;p&gt;將所得到的點座標 .csv 以 Excel 畫圖, 得到:&lt;/p&gt;

&lt;p&gt;&lt;img src="./../w7/1117-2.png" width="800" /&gt;&lt;/p&gt;

&lt;p&gt;2016-11-24&lt;/p&gt;
&lt;h2&gt;Solvespace&lt;/h2&gt;
&lt;h3&gt;1. Parts (零件繪製)&lt;/h3&gt;
&lt;p&gt;範例檔案: &lt;a href="http://solvespace.com/bracket.pl"&gt;http://solvespace.com/bracket.pl&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;Extrude (平行長出或除料)&lt;/h4&gt;
&lt;iframe src="./../w7/121.html" width="800" height="600"&gt;&lt;/iframe&gt;

&lt;h4&gt;Lathe (旋轉繞行長出或除料)&lt;/h4&gt;
&lt;h4&gt;Export Triangle Mesh&lt;/h4&gt;
&lt;p&gt;STL 格式&lt;/p&gt;
&lt;p&gt;three.js&lt;/p&gt;
&lt;iframe src="./../w7/1124-6.html" width="800" height="600"&gt;&lt;/iframe&gt;

&lt;h3&gt;2. Assembly (零件組立)&lt;/h3&gt;
&lt;h3&gt;3. Linkages (fourbar &amp;amp; multilink) (四連桿與多連桿運動模擬)&lt;/h3&gt;
&lt;h3&gt;4. Compiled &amp;amp; API (編譯與延伸應用)&lt;/h3&gt;
&lt;p&gt;使用 Virtualbox 虛擬主機執行 Windows 64 位元與 Ubuntu 64 位元環境中的編譯與延伸應用.&lt;/p&gt;
&lt;p&gt;Virtualbox Ubuntu 64位元虛擬檔案: http://140.130.17.17/public/Ubuntu/1604_solvespace_final/Ubuntu_160464.vdi (只有在區網可以下載)&lt;/p&gt;
&lt;p&gt;在虛擬主機中完成 Solvespace 編譯與執行的參考畫面:
&lt;iframe src="./../w7/1124-3.png" width="800" height="600"&gt;&lt;/iframe&gt;&lt;/p&gt;
&lt;p&gt;2016-12-1&lt;/p&gt;
&lt;h2&gt;Solvespace&lt;/h2&gt;
&lt;h3&gt;1. Solvespace 組合圖&lt;/h3&gt;
&lt;iframe src="./../w7/128.html" width="800" height="600"&gt;&lt;/iframe&gt;

&lt;p&gt;2016-12-22
 ## 3D列印
&lt;iframe src="./../w7/3d/20161222.html" width="800" height="600"&gt;&lt;/iframe&gt;&lt;/p&gt;
&lt;h2&gt;支柱&lt;/h2&gt;
&lt;p&gt;&lt;iframe src="./../w7/3d/20161217-1.html" width="800" height="600"&gt;&lt;/iframe&gt;&lt;/p&gt;
&lt;h2&gt;連接桿&lt;/h2&gt;
&lt;p&gt;&lt;iframe src="./../w7/3d/20161217.html" width="800" height="600"&gt;&lt;/iframe&gt;&lt;/p&gt;
&lt;h2&gt;底盤&lt;/h2&gt;
&lt;p&gt;&lt;iframe src="./../w7/3d/20161217-5.html" width="800" height="600"&gt;&lt;/iframe&gt;&lt;/p&gt;
&lt;h2&gt;圓盤&lt;/h2&gt;
&lt;p&gt;&lt;iframe src="./../w7/3d/20161217-3.html" width="800" height="600"&gt;&lt;/iframe&gt;&lt;/p&gt;
&lt;iframe src="https://player.vimeo.com/video/190854427" width="640" height="360" frameborder="0" webkitallowfullscreen mozallowfullscreen allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;&lt;p&gt;&lt;a href="https://vimeo.com/190854427"&gt;2016 11 09 20 05 42 998&lt;/a&gt; from &lt;a href="https://vimeo.com/user45854799"&gt;40423106&lt;/a&gt; on &lt;a href="https://vimeo.com"&gt;Vimeo&lt;/a&gt;.&lt;/p&gt;&lt;/p&gt;
&lt;iframe src="https://player.vimeo.com/video/190854371" width="640" height="360" frameborder="0" webkitallowfullscreen mozallowfullscreen allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;&lt;p&gt;&lt;a href="https://vimeo.com/190854371"&gt;2016 11 09 20 04 08 141&lt;/a&gt; from &lt;a href="https://vimeo.com/user45854799"&gt;40423106&lt;/a&gt; on &lt;a href="https://vimeo.com"&gt;Vimeo&lt;/a&gt;.&lt;/p&gt;&lt;/p&gt;
&lt;iframe src="https://player.vimeo.com/video/185637674" width="640" height="360" frameborder="0" webkitallowfullscreen mozallowfullscreen allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;&lt;p&gt;&lt;a href="https://vimeo.com/185637674"&gt;錄製_2016_10_05_20_31_24_791&lt;/a&gt; from &lt;a href="https://vimeo.com/user45854799"&gt;40423106&lt;/a&gt; on &lt;a href="https://vimeo.com"&gt;Vimeo&lt;/a&gt;.&lt;/p&gt;&lt;/p&gt;</summary></entry><entry><title>1-5 點名</title><link href="./1-5-dian-ming.html" rel="alternate"></link><published>2017-01-05T02:00:00+08:00</published><updated>2017-01-05T02:00:00+08:00</updated><author><name>40423106</name></author><id>tag:,2017-01-05:./1-5-dian-ming.html</id><summary type="html">&lt;!-- PELICAN_END_SUMMARY --&gt;</summary></entry><entry><title>12-22作業</title><link href="./12-22zuo-ye.html" rel="alternate"></link><published>2016-12-22T12:00:00+08:00</published><updated>2016-12-22T12:00:00+08:00</updated><author><name>40423106</name></author><id>tag:,2016-12-22:./12-22zuo-ye.html</id><summary type="html">&lt;!-- PELICAN_END_SUMMARY --&gt;

&lt;h2&gt;3D列印&lt;/h2&gt;
&lt;p&gt;&lt;iframe src="./../w7/3d/20161222.html" width="800" height="600"&gt;&lt;/iframe&gt;&lt;/p&gt;
&lt;h2&gt;支柱&lt;/h2&gt;
&lt;p&gt;&lt;iframe src="./../w7/3d/20161217-1.html" width="800" height="600"&gt;&lt;/iframe&gt;&lt;/p&gt;
&lt;h2&gt;連接桿&lt;/h2&gt;
&lt;p&gt;&lt;iframe src="./../w7/3d/20161217.html" width="800" height="600"&gt;&lt;/iframe&gt;&lt;/p&gt;
&lt;h2&gt;底盤&lt;/h2&gt;
&lt;p&gt;&lt;iframe src="./../w7/3d/20161217-5.html" width="800" height="600"&gt;&lt;/iframe&gt;&lt;/p&gt;
&lt;h2&gt;圓盤&lt;/h2&gt;
&lt;p&gt;&lt;iframe src="./../w7/3d/20161217-3.html" width="800" height="600"&gt;&lt;/iframe&gt;&lt;/p&gt;</summary></entry><entry><title>12-15作業</title><link href="./12-15zuo-ye.html" rel="alternate"></link><published>2016-12-15T12:00:00+08:00</published><updated>2016-12-15T12:00:00+08:00</updated><author><name>40423106</name></author><id>tag:,2016-12-15:./12-15zuo-ye.html</id><summary type="html">&lt;!-- PELICAN_END_SUMMARY --&gt;

&lt;h2&gt;Solvespace&lt;/h2&gt;</summary></entry><entry><title>12-1作業</title><link href="./12-1zuo-ye.html" rel="alternate"></link><published>2016-12-01T12:00:00+08:00</published><updated>2016-12-01T12:00:00+08:00</updated><author><name>40423106</name></author><id>tag:,2016-12-01:./12-1zuo-ye.html</id><summary type="html">&lt;!-- PELICAN_END_SUMMARY --&gt;

&lt;h2&gt;Solvespace&lt;/h2&gt;
&lt;h3&gt;1. Solvespace 組合圖&lt;/h3&gt;
&lt;iframe src="./../w7/128.html" width="800" height="600"&gt;&lt;/iframe&gt;</summary></entry><entry><title>11-24作業</title><link href="./11-24zuo-ye.html" rel="alternate"></link><published>2016-11-24T12:00:00+08:00</published><updated>2016-11-24T12:00:00+08:00</updated><author><name>40423106</name></author><id>tag:,2016-11-24:./11-24zuo-ye.html</id><summary type="html">&lt;!-- PELICAN_END_SUMMARY --&gt;

&lt;h2&gt;Solvespace&lt;/h2&gt;
&lt;h3&gt;1. Parts (零件繪製)&lt;/h3&gt;
&lt;p&gt;範例檔案: &lt;a href="http://solvespace.com/bracket.pl"&gt;http://solvespace.com/bracket.pl&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;An introductory tutorial is available, in which we draw the same part that is shown in the demo video. &lt;/p&gt;
&lt;p&gt;This covers most of the basic features of SolveSpace, including sketches, constraints, extrusions, and Boolean operations.&lt;/p&gt;
&lt;p&gt;When we first run SolveSpace, we will begin with an empty part. Initially, our view of the part will be oriented onto the XY plane; the label for that plane is displayed at the bottom left of the screen (#XY, in dark grey). The axes are also indicated by the three colored arrows at the bottom left; the X, Y, and Z axes are drawn in red, green, and blue respectively.&lt;/p&gt;
&lt;p&gt;When we hover the mouse over any entity, constraint, or other object in the sketch, that object will appear highlighted in yellow. For example, the XY plane, which is drawn as a dashed square, will appear highlighted when we hover the mouse over it. The YZ and ZX planes initially look like dashed lines, because they are being viewed on edge; but they still appear highlighted in yellow when we hold the mouse over them. It is similarly possible to highlight the X, Y, and Z axes (which are drawn as arrows), or the origin (which like all points is drawn as a green square).&lt;/p&gt;
&lt;h4&gt;Extrude (平行長出或除料)&lt;/h4&gt;
&lt;iframe src="./../w7/121.html" width="800" height="600"&gt;&lt;/iframe&gt;

&lt;h4&gt;Lathe (旋轉繞行長出或除料)&lt;/h4&gt;
&lt;h4&gt;Export Triangle Mesh&lt;/h4&gt;
&lt;p&gt;STL 格式&lt;/p&gt;
&lt;p&gt;three.js&lt;/p&gt;
&lt;iframe src="./../w7/1124-6.html" width="800" height="600"&gt;&lt;/iframe&gt;

&lt;h3&gt;2. Assembly (零件組立)&lt;/h3&gt;
&lt;h3&gt;3. Linkages (fourbar &amp;amp; multilink) (四連桿與多連桿運動模擬)&lt;/h3&gt;
&lt;h3&gt;4. Compiled &amp;amp; API (編譯與延伸應用)&lt;/h3&gt;
&lt;p&gt;使用 Virtualbox 虛擬主機執行 Windows 64 位元與 Ubuntu 64 位元環境中的編譯與延伸應用.&lt;/p&gt;
&lt;p&gt;Virtualbox Ubuntu 64位元虛擬檔案: http://140.130.17.17/public/Ubuntu/1604_solvespace_final/Ubuntu_160464.vdi (只有在區網可以下載)&lt;/p&gt;
&lt;p&gt;在虛擬主機中完成 Solvespace 編譯與執行的參考畫面:
&lt;iframe src="./../w7/1124-3.png" width="800" height="600"&gt;&lt;/iframe&gt;&lt;/p&gt;</summary></entry><entry><title>平面機構模擬</title><link href="./ping-mian-ji-gou-mo-ni.html" rel="alternate"></link><published>2016-11-17T12:00:00+08:00</published><updated>2016-11-17T12:00:00+08:00</updated><author><name>40423106</name></author><id>tag:,2016-11-17:./ping-mian-ji-gou-mo-ni.html</id><summary type="html">&lt;!-- PELICAN_END_SUMMARY --&gt;

&lt;p&gt;有關 Solvespace 機構模擬功能介紹, 與 Python3 及 Brython 程式驗證&lt;/p&gt;

&lt;h2&gt;Solvespace 平面四連桿機構模擬&lt;/h2&gt;

&lt;p&gt;直接利用 Solvespace Analyze-Trace Point-Stop Trace 得到下列繞行路徑:&lt;/p&gt;

&lt;p&gt;根據下圖, 試驗證 Solvespace 機構模擬的資料之正確性.
&lt;p&gt;&lt;img src="./../w7/1117.png" width="800" /&gt;&lt;/p&gt;&lt;/p&gt;
&lt;p&gt;將所得到的點座標 .csv 以 Excel 畫圖, 得到:&lt;/p&gt;

&lt;p&gt;&lt;img src="./../w7/1117-2.png" width="800" /&gt;&lt;/p&gt;

&lt;p&gt;Python3 平面四連桿機構模擬:&lt;/p&gt;

&lt;p&gt;Ubuntu 安裝 matplotlib:&lt;/p&gt;

&lt;p&gt;sudo apt-get install python3-matplotlib&lt;/p&gt;

&lt;pre class="brush: python"&gt;
import math
import time
# 利用 matplotlib 程式庫畫出 contour 輪廓
import matplotlib.pyplot as plt

class Coord(object):
    def __init__(self,x,y):
        self.x = x
        self.y = y

    def __sub__(self,other):
        # This allows you to substract vectors
        return Coord(self.x-other.x,self.y-other.y)

    def __repr__(self):
        # Used to get human readable coordinates when printing
        return "Coord(%f,%f)"%(self.x,self.y)

    def length(self):
        # Returns the length of the vector
        return math.sqrt(self.x**2 + self.y**2)

    def angle(self):
        # Returns the vector's angle
        return math.atan2(self.y,self.x)

def normalize(coord):
    return Coord(
        coord.x/coord.length(),
        coord.y/coord.length()
        )

def perpendicular(coord):
    # Shifts the angle by pi/2 and calculate the coordinates
    # using the original vector length
    return Coord(
        coord.length()*math.cos(coord.angle()+math.pi/2),
        coord.length()*math.sin(coord.angle()+math.pi/2)
        )


# 點類別
class Point(object):
    # 起始方法
    def __init__(self, x, y):
        self.x = x
        self.y = y

    # 加入 Eq 方法
    def Eq(self, pt):
        self.x = pt.x
        self.y = pt.y

    # 加入 setPoint 方法
    def setPoint(self, px, py):
        self.x = px
        self.y = py

    # 加上 distance(pt) 方法, 計算點到 pt 的距離
    def distance(self, pt):
        self.pt = pt
        x = self.x - self.pt.x
        y = self.y - self.pt.y
        return math.sqrt(x * x + y * y)


# Line 類別物件
class Line(object):

    # 起始方法
    def __init__(self, p1, p2):
        self.p1 = p1
        self.p2 = p2
        # 直線的第一點, 設為線尾
        self.Tail = self.p1
        # 直線組成的第二點, 設為線頭
        self.Head = self.p2
        # 直線的長度屬性
        self.length = math.sqrt(math.pow(self.p2.x-self.p1.x, 2)+math.pow(self.p2.y-self.p1.y,2))

    # setPP 以指定頭尾座標點來定義直線
    def setPP(self, p1, p2):
        self.p1 = p1
        self.p2 = p2
        self.Tail = self.p1
        self.Head = self.p2
        self.length = math.sqrt(math.pow(self.p2.x-self.p1.x, 2)+math.pow(self.p2.y-self.p1.y,2))

    # setRT 方法 for Line, 應該已經確定 Tail 點, 然後以 r, t 作為設定 Head 的參考
    def setRT(self, r, t):
        self.r = r
        self.t = t
        x = self.r * math.cos(self.t)
        y = self.r * math.sin(self.t)
        self.Tail.Eq(self.p1)
        self.Head.setPoint(self.Tail.x + x,self.Tail.y + y)

    # getR 方法 for Line
    def getR(self):
        # x 分量與 y 分量
        x = self.p1.x - self.p2.x
        y = self.p1.y - self.p2.y
        return math.sqrt(x * x + y * y)

    # 根據定義 atan2(y,x), 表示 (x,y) 與 正 x 軸之間的夾角, 介於 pi 與 -pi 間
    def getT(self):
        x = self.p2.x - self.p1.x
        y = self.p2.y - self.p1.y
        if (math.fabs(x) &lt; math.pow(10,-100)):
            if(y &lt; 0.0):
                return (-math.pi/2)
            else:
                return (math.pi/2)
        else:
            return math.atan2(y, x)

    # setTail 方法 for Line
    def setTail(self, pt):
        self.pt = pt
        self.Tail.Eq(pt)
        self.Head.setPoint(self.pt.x + self.x, self.pt.y + self.y)

    # getHead 方法 for Line
    def getHead(self):
        return self.Head

    def getTail(self):
        return self.Tail


class Link(Line):
    def __init__(self, p1, p2):
        self.p1 = p1
        self.p2 = p2
        self.length = math.sqrt(math.pow((self.p2.x - self.p1.x), 2) + math.pow((self.p2.y - self.p1.y), 2))


class Triangle(object):
    def __init__(self, p1, p2, p3):
        self.p1 = p1
        self.p2 = p2
        self.p3 = p3

    def getLenp3(self):
        p1 = self.p1
        ret = p1.distance(self.p2)
        return ret

    def getLenp1(self):
        p2 = self.p2
        ret = p2.distance(self.p3)
        return ret

    def getLenp2(self):
        p1 = self.p1
        ret = p1.distance(self.p3)
        return ret

    # 角度
    def getAp1(self):
        ret = math.acos(((self.getLenp2() * self.getLenp2() + self.getLenp3() * self.getLenp3()) - self.getLenp1() * self.getLenp1()) / (2* self.getLenp2() * self.getLenp3()))
        return ret

    def getAp2(self):
        ret =math.acos(((self.getLenp1() * self.getLenp1() + self.getLenp3() * self.getLenp3()) - self.getLenp2() * self.getLenp2()) / (2* self.getLenp1() * self.getLenp3()))
        return ret

    def getAp3(self):
        ret = math.acos(((self.getLenp1() * self.getLenp1() + self.getLenp2() * self.getLenp2()) - self.getLenp3() * self.getLenp3()) / (2* self.getLenp1() * self.getLenp2()))
        return ret

    # ends Triangle def
    # 透過三個邊長定義三角形
    def setSSS(self, lenp3, lenp1, lenp2):
        self.lenp3 = lenp3
        self.lenp1 = lenp1
        self.lenp2 = lenp2
        self.ap1 = math.acos(((self.lenp2 * self.lenp2 + self.lenp3 * self.lenp3) - self.lenp1 * self.lenp1) / (2* self.lenp2 * self.lenp3))
        self.ap2 = math.acos(((self.lenp1 * self.lenp1 + self.lenp3 * self.lenp3) - self.lenp2 * self.lenp2) / (2* self.lenp1 * self.lenp3))
        self.ap3 = math.acos(((self.lenp1 * self.lenp1 + self.lenp2 * self.lenp2) - self.lenp3 * self.lenp3) / (2* self.lenp1 * self.lenp2))

    # 透過兩個邊長與夾角定義三角形
    def setSAS(self, lenp3, ap2, lenp1):
        self.lenp3 = lenp3
        self.ap2 = ap2
        self.lenp1 = lenp1
        self.lenp2 = math.sqrt((self.lenp3 * self.lenp3 + self.lenp1 * self.lenp1) - 2* self.lenp3 * self.lenp1 * math.cos(self.ap2))
        #等於 SSS(AB, BC, CA)

    def setSaSS(self, lenp2, lenp3, lenp1):
        self.lenp2 = lenp2
        self.lenp3 = lenp3
        self.lenp1 = lenp1
        if(self.lenp1 &gt; (self.lenp2 + self.lenp3)):
        #CAB 夾角為 180 度, 三點共線且 A 介於 BC 之間
            ret = math.pi
        else :
            # CAB 夾角為 0, 三點共線且 A 不在 BC 之間
            if((self.lenp1 &lt; (self.lenp2 - self.lenp3)) or (self.lenp1 &lt; (self.lenp3 - self.lenp2))):
                ret = 0.0
            else :
            # 透過餘絃定理求出夾角 CAB 
                ret = math.acos(((self.lenp2 * self.lenp2 + self.lenp3 * self.lenp3) - self.lenp1 * self.lenp1) / (2 * self.lenp2 * self.lenp3))
        return ret

    # 取得三角形的三個邊長值
    def getSSS(self):
        temp = []
        temp.append( self.getLenp1() )
        temp.append( self.getLenp2() )
        temp.append( self.getLenp3() )
        return temp

    # 取得三角形的三個角度值
    def getAAA(self):
        temp = []
        temp.append( self.getAp1() )
        temp.append( self.getAp2() )
        temp.append( self.getAp3() )
        return temp

    # 取得三角形的三個角度與三個邊長
    def getASASAS(self):
        temp = []
        temp.append(self.getAp1())
        temp.append(self.getLenp1())
        temp.append(self.getAp2())
        temp.append(self.getLenp2())
        temp.append(self.getAp3())
        temp.append(self.getLenp3())
        return temp

    #2P 2L return mid P
    def setPPSS(self, p1, p3, lenp1, lenp3):
        temp = []
        self.p1 = p1
        self.p3 = p3
        self.lenp1 = lenp1
        self.lenp3 = lenp3

        #bp3 is the angle beside p3 point, cp3 is the angle for line23, p2 is the output
        line31 = Line(p3, p1)
        self.lenp2 = line31.getR()
        #self.lenp2 = self.p3.distance(self.p1)
        #這裡是求角3
        ap3 = math.acos(((self.lenp1 * self.lenp1 + self.lenp2 * self.lenp2) - self.lenp3 * self.lenp3) / (2 * self.lenp1 * self.lenp2))
        #ap3 = math.acos(((self.lenp1 * self.lenp1 + self.lenp3 * self.lenp3) - self.lenp2 * self.lenp2) / (2 * self.lenp1 * self.lenp3))
        bp3 = line31.getT()
        cp3 = bp3 - ap3
        temp.append(p3.x + self.lenp1*math.cos(cp3))#p2.x
        temp.append(p3.y + self.lenp1*math.sin(cp3))#p2.y
        return temp

# 以上為相關函式物件的定義區
# 全域變數
midpt = Point(0, 0)
tippt = Point(0, 0)
contour = []

# 幾何位置輸入變數
x=10
y=10
r=10

# 其他輸入變數
theta = 0
degree = math.pi/180.0
dx = 2
dy = 4

#set p1.p2.p3.p4 position
p1 =  Point(150,100)
p2 =  Point(150,200)
p3 =  Point(300,300)
p4 =  Point(350,100)

#create links
line1 =  Link(p1,p2)
line2 =  Link(p2,p3)
line3 =  Link(p3,p4)
line4 =  Link(p1,p4)
line5 =  Link(p2,p4)

link2_len = p2.distance(p3)
link3_len = p3.distance(p4)

triangle1 =  Triangle(p1,p2,p4)
triangle2 =  Triangle(p2,p3,p4)

def simulate():
    global theta, midpt, oldpt
    theta += dx
    p2.x = p1.x + line1.length*math.cos(theta*degree)
    p2.y = p1.y - line1.length*math.sin(theta*degree)
    p3.x, p3.y = triangle2.setPPSS(p2,p4,link2_len,link3_len)
    # 計算垂直單位向量
    a = Coord(p3.x, p3.y)
    b = Coord(p2.x, p2.y)
    normal = perpendicular(normalize(a-b))
    midpt.x = (p2.x + p3.x)/2
    midpt.y = (p2.y + p3.y)/2
    tippt.x = midpt.x + 150*normal.x
    tippt.y = midpt.y + 150*normal.y
    # 印出座標點
    #print(round(tippt.x, 2), round(tippt.y, 2))
    if theta &lt; 360:
        contour.append((round(tippt.x, 2), round(tippt.y, 2)))

for i in range(180):
    simulate()
# 印出 contour 
#print(contour)

x_list = [x for (x, y) in contour]
y_list = [y for (x, y) in contour]

plt.xlabel('x coordinate')
plt.ylabel('y coordinate')

plt.plot(x_list, y_list)
plt.show()
&lt;/pre&gt;</summary></entry><entry><title>四連桿機構</title><link href="./si-lian-gan-ji-gou.html" rel="alternate"></link><published>2016-10-27T12:00:00+08:00</published><updated>2016-10-27T12:00:00+08:00</updated><author><name>40423106</name></author><id>tag:,2016-10-27:./si-lian-gan-ji-gou.html</id><summary type="html">&lt;!-- PELICAN_END_SUMMARY --&gt;

&lt;p&gt;已經四連桿各桿尺寸, 當機構繞行一圈後求特定點的座標, 以 Solvespace 進行點座標追蹤存檔, 得到
&lt;a href="./../w7/w7_fourbar.csv"&gt;w7_fourbar.csv&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;根據下圖, 試驗證 Solvespace 機構模擬的資料之正確性.
&lt;a href="http://imgur.com/gUi0Uuf"&gt;&lt;img src="http://i.imgur.com/gUi0Uuf.png" title="source: imgur.com" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Solvespace 四連桿圖檔:
&lt;a href="./../w7/w7_fourbar.slvs"&gt;按右鍵存檔&lt;/a&gt;&lt;/p&gt;</summary></entry><entry><title>40423106 四設計二甲 王翔佑 零件繪圖</title><link href="./40423106-si-she-ji-er-jia-wang-xiang-you-ling-jian-hui-tu.html" rel="alternate"></link><published>2016-09-29T12:00:00+08:00</published><updated>2016-09-29T12:00:00+08:00</updated><author><name>40423106</name></author><id>tag:,2016-09-29:./40423106-si-she-ji-er-jia-wang-xiang-you-ling-jian-hui-tu.html</id><summary type="html">&lt;!-- PELICAN_END_SUMMARY --&gt;

&lt;iframe src="https://player.vimeo.com/video/185637674" width="640" height="360" frameborder="0" webkitallowfullscreen mozallowfullscreen allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;&lt;p&gt;&lt;a href="https://vimeo.com/185637674"&gt;錄製_2016_10_05_20_31_24_791&lt;/a&gt; from &lt;a href="https://vimeo.com/user45854799"&gt;40423106&lt;/a&gt; on &lt;a href="https://vimeo.com"&gt;Vimeo&lt;/a&gt;.&lt;/p&gt;&lt;/p&gt;
&lt;p&gt;這次老師教我們用新的繪圖軟體,檔案小,功能齊全&lt;/p&gt;</summary><category term="零件繪圖"></category></entry><entry><title>上課筆記</title><link href="./shang-ke-bi-ji.html" rel="alternate"></link><published>2016-09-29T12:00:00+08:00</published><updated>2016-09-29T12:00:00+08:00</updated><author><name>40423106</name></author><id>tag:,2016-09-29:./shang-ke-bi-ji.html</id><summary type="html">&lt;!-- PELICAN_END_SUMMARY --&gt;

&lt;p&gt;到 https://github.com/mdecourse 的 2016cadp 按 Fork&lt;/p&gt;

&lt;p&gt;到自己的github創2016fallcadp_hw&lt;/p&gt;

&lt;p&gt;創 2016fallcadp_ag4(組別)&lt;/p&gt;

&lt;p&gt;將2016fallcadp_ag4 clone下來---&gt;cd 2016fallcadp_ag4--&gt;git checkout gh-pages--&gt;git branch(再次檢查)--&gt;git submodule add -b gh-pages 網址 學號--&gt;git staus--&gt;依序將組員的資料夾加入--&gt;git add -A--&gt;git commit -m "名稱"--&gt;git push origin gh-pages&lt;/p&gt;</summary></entry></feed>